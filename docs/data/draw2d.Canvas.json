{
  "name": "Canvas",
  "namespace": "draw2d",
  "description": "<p>A scrolling Canvas that contains Figures. Call <code>add(draw2d.Figure)</code> to add shapes to the Viewport.</p>",
  "extends": [],
  "access": "",
  "virtual": false,
  "functions": [
    {
      "name": "init",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Create a new canvas with the given HTML DOM references.</p>",
      "parameters": [
        {
          "name": "canvasId",
          "type": "String",
          "description": "<p>the id of the DOM element to use a parent container</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "destroy",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Call this method if you didn't need the canvas anymore. The method unregister all even handlers\nand frees all resources. The canvas is unusable after this call</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "clear",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Reset the canvas and delete all model elements.<br>\nYou can now reload another model to the canvas with a {@link draw2d.io.Reader}</p>",
      "parameters": [],
      "inherited": false,
      "since": "1.1.0",
      "examples": [],
      "returns": {
        "type": "this",
        "description": ""
      }
    },
    {
      "name": "hideDecoration",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Callback for any kind of image export tools to trigger the canvas to hide all unwanted\ndecorations. The method is called e.g. from the draw2d.io.png.Writer</p>",
      "parameters": [],
      "inherited": false,
      "since": "4.0.0",
      "examples": []
    },
    {
      "name": "showDecoration",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>callback method for any image export writer to reactivate the decoration\nof the canvas. e.g. grids, rulers,...</p>",
      "parameters": [],
      "inherited": false,
      "since": "4.0.0",
      "examples": []
    },
    {
      "name": "calculateConnectionIntersection",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Calculate all connection intersection of the canvas.\nRequired for &quot;bridging&quot; or &quot;crossing decoration&quot;</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "installEditPolicy",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Install a new selection and edit policy into the canvas</p>",
      "parameters": [
        {
          "name": "policy",
          "type": "draw2d.policy.EditPolicy",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "2.2.0",
      "examples": []
    },
    {
      "name": "uninstallEditPolicy",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>UnInstall the selection and edit policy from the canvas.</p>",
      "parameters": [
        {
          "name": "policy",
          "type": [
            "draw2d.policy.EditPolicy",
            "String"
          ],
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "2.2.0",
      "examples": []
    },
    {
      "name": "setZoom",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Set the new zoom factor for the canvas. The value must be between [0.01..10]</p>\n<pre><code>// you can register an eventhandler if the zoom factor did change\ncanvas.on(&quot;zoom&quot;, function(emitterFigure, zoomData){\n    alert(&quot;canvas zoomed to:&quot;+zoomData.value);\n});</code></pre>",
      "parameters": [
        {
          "name": "zoomFactor",
          "type": "Number",
          "description": "<p>new zoom factor. range [0.001..10]. 1.0 is no zoom.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "animated",
          "type": "Boolean",
          "description": "<p>set it to true for smooth zoom in/out</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "getZoom",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Return the current zoom factor of the canvas.</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "Number",
        "description": ""
      }
    },
    {
      "name": "getDimension",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Return the dimension of the drawing area</p>",
      "parameters": [],
      "inherited": false,
      "since": "4.4.0",
      "examples": [],
      "returns": {
        "type": "draw2d.geo.Rectangle",
        "description": ""
      }
    },
    {
      "name": "setDimension",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Tells the canvas to resize. If you do not specific any parameters\nthe canvas will attempt to determine the height and width by the enclosing bounding box\nof all elements and set the dimension accordingly. If you would like to set the dimension\nexplicitly pass in an draw2d.geo.Rectangle or an object with <b>height</b> and <b>width</b> properties.</p>",
      "parameters": [
        {
          "name": "dim",
          "type": "draw2d.geo.Rectangle",
          "description": "<p>the dimension to set or null for autodetect</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        },
        {
          "name": "height",
          "type": "Number",
          "description": "<p>the height of the canvas if the first argument is a number and not a Rectangle</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "4.4.0",
      "examples": []
    },
    {
      "name": "fromDocumentToCanvasCoordinate",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Transforms a document coordinate to canvas coordinate.</p>",
      "parameters": [
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x coordinate relative to the window</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y coordinate relative to the window</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.geo.Point",
        "description": "<p>The coordinate in relation to the canvas [0,0] position</p>"
      }
    },
    {
      "name": "fromCanvasToDocumentCoordinate",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Transforms a canvas coordinate to document coordinate.</p>",
      "parameters": [
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x coordinate in the canvas</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y coordinate in the canvas</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.geo.Point",
        "description": "<p>the coordinate in relation to the document [0,0] position</p>"
      }
    },
    {
      "name": "getHtmlContainer",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>The DOM host of the canvas</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "HTMLElement",
        "description": ""
      }
    },
    {
      "name": "_getEvent",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Return a common event object independed if we run on an iPad or desktop.</p>",
      "parameters": [
        {
          "name": "event",
          "type": "",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "DOMEventObject",
        "description": ""
      }
    },
    {
      "name": "setScrollArea",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Set the area which are scrolling the canvas. This can be a jquery selector or\na jQuery node.</p>",
      "parameters": [
        {
          "name": "elementSelector",
          "type": "String/HTMLElement",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "this",
        "description": ""
      }
    },
    {
      "name": "getScrollArea",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>return the scrolling area of the canvas. This is jQuery object</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "JQueryElement",
        "description": ""
      }
    },
    {
      "name": "getScrollLeft",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>The left scroll position.</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "Number",
        "description": "<p>the left scroll offset of the canvas</p>"
      }
    },
    {
      "name": "getScrollTop",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>The top scroll position</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "Number",
        "description": "<p>the top scroll offset of the cnavas.</p>"
      }
    },
    {
      "name": "setScrollLeft",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Set left scroll position.</p>",
      "parameters": [
        {
          "name": "left",
          "type": "Number",
          "description": "<p>the left scroll offset of the canvas</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "setScrollTop",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>set top scroll position</p>",
      "parameters": [
        {
          "name": "top",
          "type": "Number",
          "description": "<p>the top scroll offset of the canvas.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "scrollTo",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>set the new scroll position of the canvas</p>",
      "parameters": [
        {
          "name": "top",
          "type": "Number",
          "description": "<p>the top scroll offset of the canvas.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "left",
          "type": "Number",
          "description": "<p>the left scroll offset of the canvas</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "5.8.0",
      "examples": []
    },
    {
      "name": "getAbsoluteX",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>The absolute document x offset.</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "Number",
        "description": ""
      }
    },
    {
      "name": "getAbsoluteY",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>The absolute document y offset.</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "Number",
        "description": ""
      }
    },
    {
      "name": "getWidth",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Return the width of the canvas</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "Number",
        "description": ""
      }
    },
    {
      "name": "getHeight",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Return the height of the canvas.</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "Number",
        "description": ""
      }
    },
    {
      "name": "add",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Add a figure at the given x/y coordinate. This method fires an event.</p>\n<p>Example:</p>\n<pre><code>canvas.on(&quot;figure:add&quot;, function(emitter, event){\n   alert(&quot;figure added:&quot;);\n});\n\n// or more general if you want catch all figure related events\n//\ncanvas.on(&quot;figure&quot;, function(emitter, event){\n   // use event.figure.getCanvas()===null to determine if the\n   // figure part of the canvas\n\n   alert(&quot;figure added or removed:&quot;);\n});</code></pre>",
      "parameters": [
        {
          "name": "figure",
          "type": "draw2d.Figure",
          "description": "<p>The figure to add.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "x",
          "type": "Number/draw2d.geo.Point",
          "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>The y position.</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "remove",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Remove a figure or connection from the Canvas. This method fires an event\nwhich can be catched.</p>\n<p>Example:</p>\n<pre><code>canvas.on(&quot;figure:remove&quot;, function(emitter, event){\n   alert(&quot;figure removed:&quot;);\n});\n\n// or more general if you want catch all figure related events\n//\ncanvas.on(&quot;figure&quot;, function(emitter, event){\n   // use event.figure.getCanvas()===null to determine if the\n   // figure part of the canvas\n\n   alert(&quot;figure added or removed:&quot;);\n});</code></pre>",
      "parameters": [
        {
          "name": "figure",
          "type": "draw2d.Figure",
          "description": "<p>The figure to remove</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "getLines",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Returns all lines/connections in this workflow/canvas.<br></p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.util.ArrayList",
        "description": ""
      }
    },
    {
      "name": "getFigures",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Returns the internal figures.<br></p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.util.ArrayList",
        "description": ""
      }
    },
    {
      "name": "getLine",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Returns the line or connection with the given id.</p>",
      "parameters": [
        {
          "name": "id",
          "type": "String",
          "description": "<p>The id of the line.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.shape.basic.Line",
        "description": ""
      }
    },
    {
      "name": "getFigure",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Returns the figure with the given id.</p>",
      "parameters": [
        {
          "name": "id",
          "type": "String",
          "description": "<p>The id of the figure.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.Figure",
        "description": ""
      }
    },
    {
      "name": "getIntersection",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Return all intersections draw2d.geo.Point between the given line and all other\nlines in the canvas.</p>",
      "parameters": [
        {
          "name": "line",
          "type": "draw2d.shape.basic.Line",
          "description": "<p>the line for the intersection test</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.util.ArrayList",
        "description": ""
      }
    },
    {
      "name": "snapToHelper",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Adjust the coordinate with the installed SnapToHelper.</p>",
      "parameters": [
        {
          "name": "figure",
          "type": "draw2d.Figure",
          "description": "<p>The related figure</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "pos",
          "type": "draw2d.geo.Point",
          "description": "<p>The position to adjust</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.geo.Point",
        "description": "<p>the adjusted position</p>"
      }
    },
    {
      "name": "registerPort",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Register a port to the canvas. This is required for other ports to find a valid drop target.</p>",
      "parameters": [
        {
          "name": "port",
          "type": "draw2d.Port",
          "description": "<p>The new port which has been added to the Canvas.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "unregisterPort",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Remove a port from the internal cnavas registration. Now other ports can't find the\nport anymore as drop target. The port itself is still visible.</p>",
      "parameters": [
        {
          "name": "port",
          "type": "draw2d.Port",
          "description": "<p>The port to unregister as potential drop target</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "this",
        "description": ""
      }
    },
    {
      "name": "getAllPorts",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Return all ports in the canvas</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.util.ArrayList",
        "description": "<p>all ports from all figures</p>"
      }
    },
    {
      "name": "getCommandStack",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Returns the command stack for the Canvas. Required for undo/redo support.</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.command.CommandStack",
        "description": ""
      }
    },
    {
      "name": "getPrimarySelection",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Returns the current selected figure in the Canvas.</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.Figure",
        "description": ""
      }
    },
    {
      "name": "getSelection",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Returns the current selection.</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.Selection",
        "description": ""
      }
    },
    {
      "name": "setCurrentSelection",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Set the current selected figure or figures in the canvas.<br>\n<br>\nYou can hand over a draw2d.util.ArrayList since version 4.8.0 for multiple selection.</p>",
      "parameters": [
        {
          "name": "object",
          "type": [
            "draw2d.Figure",
            "draw2d.util.ArrayList"
          ],
          "description": "<p>The figure or list of figures to select.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "this",
        "description": ""
      }
    },
    {
      "name": "addSelection",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Add the current figure to the selection. If a single selection policy is installed in the\ncanvas the selection before is reseted and the figure is the one and only selection.</p>",
      "parameters": [
        {
          "name": "object",
          "type": [
            "draw2d.Figure",
            "draw2d.util.ArrayList"
          ],
          "description": "<p>The figure(s) to add to the selection</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "4.6.0",
      "examples": [],
      "returns": {
        "type": "this",
        "description": ""
      }
    },
    {
      "name": "getBestFigure",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
      "parameters": [
        {
          "name": "x",
          "type": "Number",
          "description": "<p>The x position.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>The y position.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "blacklist",
          "type": [
            "draw2d.Figure",
            "Array",
            "Class"
          ],
          "description": "<p>The figures or class which should be ignored.</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        },
        {
          "name": "whitelist",
          "type": [
            "draw2d.Figure",
            "Array",
            "Class"
          ],
          "description": "<p>The figures or class should be considered.</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.Figure",
        "description": ""
      }
    },
    {
      "name": "getBestLine",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Return the line which match the hands over coordinate</p>",
      "parameters": [
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x-coordinate for the hit test</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the x-coordinate for the hit test</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "lineToIgnore",
          "type": "draw2d.shape.basic.Line",
          "description": "<p>a possible line which should be ignored for the hit test</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.shape.basic.Line",
        "description": ""
      }
    },
    {
      "name": "onDragEnter",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called by the framework during drag&amp;drop operations.<br>\nDroppable can be setup with:</p>\n<pre>\n   $(\".draw2d_droppable\").draggable({\n        appendTo:\"#container\",\n        stack:\"#container\",\n        zIndex: 27000,\n        helper:\"clone\",\n        start: function(e, ui){$(ui.helper).addClass(\"shadow\");}\n   });\n</pre>\n<p>Draw2D use the jQuery draggable/droppable lib. Please inspect\nhttp://jqueryui.com/demos/droppable/ for further information.</p>",
      "parameters": [
        {
          "name": "draggedDomNode",
          "type": "HTMLElement",
          "description": "<p>The DOM element which is currently dragging</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "onDrag",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called if the DragDrop object is moving around.<br>\n<br>\nDraw2D use the jQuery draggable/droppable lib. Please inspect\nhttp://jqueryui.com/demos/droppable/ for further information.</p>",
      "parameters": [
        {
          "name": "draggedDomNode",
          "type": "HTMLElement",
          "description": "<p>The dragged DOM element.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x coordinate of the drag</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y coordinate of the drag</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "onDragLeave",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called if the DragDrop object leaving the current hover figure.<br>\n<br>\nGraphiti use the jQuery draggable/droppable lib. Please inspect\nhttp://jqueryui.com/demos/droppable/ for further information.</p>",
      "parameters": [
        {
          "name": "draggedDomNode",
          "type": "HTMLElement",
          "description": "<p>The figure which is currently dragging</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "onDrop",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called if the user drop the droppedDomNode onto the canvas.<br>\n<br>\nDraw2D use the jQuery draggable/droppable lib. Please inspect\nhttp://jqueryui.com/demos/droppable/ for further information.</p>",
      "parameters": [
        {
          "name": "droppedDomNode",
          "type": "HTMLElement",
          "description": "<p>The dropped DOM element.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x-coordinate of the mouse up event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y-coordinate of the mouse up event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "onDoubleClick",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Callback method for the double click event. The x/y coordinates are relative to the top left\ncorner of the canvas.</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "onClick",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "",
      "parameters": [
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x coordinate of the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y coordinate of the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "onRightMouseDown",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "<p>The user has triggered a right click. Redirect them to a responsible figure.</p>",
      "parameters": [
        {
          "name": "x",
          "type": "Number",
          "description": "<p>The x-coordinate of the click</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>The y-coordinate of the click</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "1.1.0",
      "examples": []
    },
    {
      "name": "onMouseWheel",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "",
      "parameters": [
        {
          "name": "wheelDelta",
          "type": "Number",
          "description": "<p>the delata of the wheel rotation</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x coordinate of the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y coordinate of the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "fireEvent",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Execute all handlers and behaviors attached to the canvas for the given event type.</p>",
      "parameters": [
        {
          "name": "event",
          "type": "String",
          "description": "<p>the event to trigger</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "args",
          "type": "Object",
          "description": "<p>optional parameters for the triggered event callback</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "5.0.0",
      "examples": []
    },
    {
      "name": "on",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Attach an event handler function for one or more events to the canvas.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>reset</li>\n  <li>select</li>\n</ul>\n<p>Example:</p>\n<pre><code>canvas.on(&quot;clear&quot;, function(emitter, event){\n   alert(&quot;canvas.clear() called.&quot;);\n});\n\ncanvas.on(&quot;select&quot;, function(emitter,event){\n   alert(&quot;figure selected&quot;);\n});\n\ncanvas.on(&quot;unselect&quot;, function(emitter,event){\n   alert(&quot;figure unselected&quot;);\n});</code></pre>",
      "parameters": [
        {
          "name": "event",
          "type": "String",
          "description": "<p>One or more space-separated event types</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "callback",
          "type": "function",
          "description": "<p>A function to execute when the event is triggered.</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "callback.emitter",
          "type": "draw2d.Canvas",
          "description": "<p>the emitter of the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "callback.obj",
          "type": "Object",
          "description": "<p>optional event related data</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "5.0.0",
      "examples": []
    },
    {
      "name": "off",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>The <code>off()</code> method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the canvas.<br>\n<br>\nIf a simple event name such as &quot;reset&quot; is provided, all events of that type are removed from the canvas.</p>",
      "parameters": [
        {
          "name": "eventOrFunction",
          "type": [
            "String",
            "function"
          ],
          "description": "<p>the event name of the registerd function</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "5.0.0",
      "examples": []
    }
  ],
  "fires": "",
  "constructor": {
    "name": "Canvas",
    "description": "",
    "parameters": [],
    "examples": []
  }
}