{
  "name": "VertexRouter",
  "namespace": "draw2d.layout.connection",
  "description": "<p>A Router with unlimited vertices.</p>",
  "extends": [
    "draw2d.layout.connection.ConnectionRouter"
  ],
  "access": "",
  "virtual": false,
  "functions": [
    {
      "name": "init",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Creates a new Router object</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "onInstall",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Callback method if the router has been assigned to a connection.</p>",
      "parameters": [
        {
          "name": "connection",
          "type": "draw2d.Connection",
          "description": "<p>The assigned connection</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "2.7.2",
      "examples": []
    },
    {
      "name": "invalidate",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Invalidates the given Connection</p>",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "route",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "canRemoveVertexAt",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Callback method for the PolyLine or Connection to check if it possible to remove a vertex from\nthe list. The router can send an veto for this.\nPer default it is not possible to remove any vertex from the PolyLine exceptional if any interactive\nrouter is installed.</p>",
      "parameters": [
        {
          "name": "conn",
          "type": "draw2d.Connection",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "index",
          "type": "Number",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "4.2.3",
      "examples": []
    },
    {
      "name": "canRemoveSegmentAt",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Callback method for the PolyLine or Connection to verify that a segment is deletable.</p>",
      "parameters": [
        {
          "name": "conn",
          "type": "draw2d.Connection",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "index",
          "type": "Number",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "4.2.3",
      "examples": [],
      "returns": {
        "type": "Boolean",
        "description": ""
      }
    },
    {
      "name": "getPersistentAttributes",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Tweak or enrich the polyline persistence data with routing information</p>",
      "parameters": [
        {
          "name": "line",
          "type": "draw2d.shape.basic.PolyLine",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "memento",
          "type": "Object",
          "description": "<p>The memento data of the polyline</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "2.10.0",
      "examples": [],
      "returns": {
        "type": "Object",
        "description": ""
      }
    },
    {
      "name": "setPersistentAttributes",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>set the attributes for the polyline with routing information</p>",
      "parameters": [
        {
          "name": "memento",
          "type": "Object",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "2.10.0",
      "examples": []
    },
    {
      "name": "onDrag",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>The draw2d.Connection delegates the drag operation to the router. The router can\nhandle the different constraints of the connection and just drag&amp;drop a single segment\ninstead of the complete connection.</p>",
      "parameters": [
        {
          "name": "line",
          "type": "draw2d.shape.basic.Line",
          "description": "<p>the related line to handle</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "dx",
          "type": "Number",
          "description": "<p>the x difference between the start of the drag drop operation and now</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "dy",
          "type": "Number",
          "description": "<p>the y difference between the start of the drag drop operation and now</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "dx2",
          "type": "Number",
          "description": "<p>The x diff since the last call of this dragging operation</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "dy2",
          "type": "Number",
          "description": "<p>The y diff since the last call of this dragging operation</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "6.1.0",
      "examples": []
    },
    {
      "name": "route",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Routes the Connection.</p>",
      "parameters": [
        {
          "name": "connection",
          "type": "draw2d.Connection",
          "description": "<p>The Connection to route</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "routingHints",
          "type": "Object",
          "description": "<p>some helper attributes for the router</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        },
        {
          "name": "routingHints.startMoved",
          "type": "Boolean",
          "description": "<p>is true if just the start location has moved</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        },
        {
          "name": "routingHints.endMoved",
          "type": "Boolean",
          "description": "<p>is true if the destination location has changed</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        },
        {
          "name": "routingHints.oldVertices",
          "type": "draw2d.util.ArrayList",
          "description": "<p>the vertices before the reroute has been triggered</p>",
          "default": "",
          "optional": true,
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "",
      "examples": []
    },
    {
      "name": "onUninstall",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Callback method if the router has been removed from the connection.</p>",
      "parameters": [
        {
          "name": "connection",
          "type": "draw2d.shape.basic.PolyLine",
          "description": "<p>The related connection</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "2.7.2",
      "examples": []
    },
    {
      "name": "verticesSet",
      "access": "protected",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called by the connection if the vertices set outside.\nThis enforce the router to avoid full autoroute. E.g. InteractiveManhattanRouter</p>",
      "parameters": [
        {
          "name": "line",
          "type": "draw2d.shape.basic.Line",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "",
      "examples": []
    }
  ],
  "fires": "",
  "constructor": {
    "name": "VertexRouter",
    "description": "",
    "parameters": [],
    "examples": [
      "// Override the default connection type. This is used during drag&drop operations of ports.\n   //\n   let createConnection=function(){\n      // return my special kind of connection\n      let con = new draw2d.Connection();\n      con.setRouter(new draw2d.layout.connection.VertexRouter());\n      return con;\n   };\n\n   // Install a special policy into the canvas to use my own implementation of connection\n   // if we drag&drop a port\n   //\n   canvas.installEditPolicy(  new draw2d.policy.connection.DragConnectionCreatePolicy({\n         createConnection: createConnection\n   }));\n\n   // create and add two nodes which contains Ports (In and OUT)\n   //\n   let start = new draw2d.shape.node.Start();\n   let end   = new draw2d.shape.node.End();\n   // ...add it to the canvas\n   canvas.add( start, 50,50);\n   canvas.add( end, 230,80);\n\n   // first Connection\n   //\n   let c = createConnection();\n   c.setSource(start.getOutputPort(0));\n   c.setTarget(end.getInputPort(0));\n   canvas.add(c);"
    ]
  }
}