{
  "name": "DropInterceptorPolicy",
  "namespace": "draw2d.policy.canvas",
  "description": "<p>Drop interceptors are basically event handlers from which you can return a value\nthat tells draw2d to abort what it is that it was doing.<br>\n<br>\nInterceptors can be registered via the registerEditPolicy method on the draw2d canvas just like any other\nedit policies.<br>\n<br>\nThe <b>delegateTarget</b> method is responsible for all drop event especially to all connection and port handling.</p>",
  "extends": [
    "draw2d.policy.canvas.CanvasPolicy"
  ],
  "access": "",
  "virtual": false,
  "functions": [
    {
      "name": "init",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "",
      "parameters": [],
      "inherited": false,
      "since": "",
      "examples": []
    },
    {
      "name": "delegateTarget",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called if the user want connect a port with any kind draw2d.Figure.<br>\nReturn a non <b>null</b> value if the interceptor accept the connect event.<br>\n<br>\nIt is possible to delegate the drop event to another figure if the policy\nreturns another figure. This is useful if a figure want to accept a port\ndrop event and delegates this drop event to another port.<br></p>",
      "parameters": [
        {
          "name": "connectInquirer",
          "type": "draw2d.Figure",
          "description": "<p>the figure who wants connect</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "connectIntent",
          "type": "draw2d.Figure",
          "description": "<p>the potential connect target</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": false,
      "since": "",
      "examples": [],
      "returns": {
        "type": "draw2d.Figure",
        "description": "<p>the calculated connect intent or <b>null</b> if the interceptor uses the veto right</p>"
      }
    },
    {
      "name": "onInstall",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called if the policy is installed into the canvas.</p>",
      "parameters": [
        {
          "name": "canvas",
          "type": "draw2d.Canvas",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "",
      "examples": []
    },
    {
      "name": "onUninstall",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called if the policy is deinstalled from the canvas</p>",
      "parameters": [
        {
          "name": "canvas",
          "type": "draw2d.Canvas",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "",
      "examples": []
    },
    {
      "name": "onMouseMove",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "",
      "parameters": [
        {
          "name": "canvas",
          "type": "draw2d.Canvas",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x-coordinate of the mouse event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y-coordinate of the mouse event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "",
      "examples": []
    },
    {
      "name": "onMouseDown",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "",
      "parameters": [
        {
          "name": "canvas",
          "type": "draw2d.Canvas",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x-coordinate of the mouse down event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y-coordinate of the mouse down event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "",
      "examples": []
    },
    {
      "name": "onMouseDrag",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "",
      "parameters": [
        {
          "name": "canvas",
          "type": "draw2d.Canvas",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "dx",
          "type": "Number",
          "description": "<p>The x diff between start of dragging and this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "dy",
          "type": "Number",
          "description": "<p>The y diff between start of dragging and this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "dx2",
          "type": "Number",
          "description": "<p>The x diff since the last call of this dragging operation</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "dy2",
          "type": "Number",
          "description": "<p>The y diff since the last call of this dragging operation</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "",
      "examples": []
    },
    {
      "name": "onMouseUp",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "",
      "parameters": [
        {
          "name": "canvas",
          "type": "draw2d.Canvas",
          "description": "<p>the shape below the mouse or null</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x-coordinate of the mouse down event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y-coordinate of the mouse down event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "",
      "examples": []
    },
    {
      "name": "onRightMouseDown",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called if the user press the right mouse in the canvas.</p>",
      "parameters": [
        {
          "name": "figure",
          "type": [
            "draw2d.Figure",
            "draw2d.shape.basic.Line"
          ],
          "description": "<p>the figure below the mouse</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x-coordinate of the mouse down event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y-coordinate of the mouse down event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "4.4.0",
      "examples": []
    },
    {
      "name": "onClick",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called by the canvas if the user click on a figure.</p>",
      "parameters": [
        {
          "name": "figure",
          "type": "draw2d.Figure",
          "description": "<p>the figure under the click event. Can be null</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "mouseX",
          "type": "Number",
          "description": "<p>the x coordinate of the mouse during the click event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "mouseY",
          "type": "Number",
          "description": "<p>the y coordinate of the mouse during the click event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "3.0.0",
      "examples": []
    },
    {
      "name": "onDoubleClick",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Called by the canvas if the user double click on a figure.</p>",
      "parameters": [
        {
          "name": "figure",
          "type": "draw2d.Figure",
          "description": "<p>the figure under the double click event. Can be null</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "mouseX",
          "type": "Number",
          "description": "<p>the x coordinate of the mouse during the click event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "mouseY",
          "type": "Number",
          "description": "<p>the y coordinate of the mouse during the click event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "Boolean",
          "description": "<p>true if the shift key has been pressed during this event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "Boolean",
          "description": "<p>true if the ctrl key has been pressed during the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "4.1.0",
      "examples": []
    },
    {
      "name": "onMouseWheel",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>called if the user uses the mouse wheel.</p>",
      "parameters": [
        {
          "name": "wheelDelta",
          "type": "Number",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "x",
          "type": "Number",
          "description": "<p>the x coordinate of the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "y",
          "type": "Number",
          "description": "<p>the y coordinate of the event</p>",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "shiftKey",
          "type": "",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "ctrlKey",
          "type": "",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "5.8.0",
      "examples": [],
      "returns": {
        "type": "Boolean",
        "description": "<p>return <b>false</b> to preven tthe default event operation (e.g. scrolling)</p>"
      }
    },
    {
      "name": "createMonochromGif",
      "access": "private",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Helper method to make an monochrome GIF image WxH pixels big, first create a properly sized array: let pixels = new Array(W<em>H);.\nThen, for each pixel X,Y that should be opaque, store a 1 at the proper location: pixels[X+Y</em>W] = 1;.\nFinally, create the image: let my_gif = createGif(W, H, pixels, color);\n&quot;0&quot; pixels are transparent.\nThe <b>color</b> defines the foreground color.</p>\n<p>Now, you can specify this image as the SRC attribute of an IMG tag: document.write(&quot;&lt;IMG SRC=&quot;&quot; + my_gif + &quot;&quot;&gt;&quot;);\nor for the canvas as background-image css attribute.</p>",
      "parameters": [
        {
          "name": "w",
          "type": "",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "h",
          "type": "",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "d",
          "type": "",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "color",
          "type": "",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "",
      "examples": [],
      "returns": {
        "type": "String",
        "description": ""
      }
    },
    {
      "name": "attr",
      "access": "",
      "virtual": false,
      "deprecated": "",
      "description": "<p>Read or set object attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>",
      "parameters": [
        {
          "name": "name",
          "type": "String/Object",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "value",
          "type": "Object",
          "description": "",
          "default": "",
          "optional": true,
          "nullable": ""
        }
      ],
      "inherited": true,
      "since": "5.3.2",
      "examples": [],
      "returns": {
        "type": "Object",
        "description": ""
      }
    }
  ],
  "fires": "",
  "constructor": {
    "name": "DropInterceptorPolicy",
    "description": "",
    "parameters": [],
    "examples": []
  }
}