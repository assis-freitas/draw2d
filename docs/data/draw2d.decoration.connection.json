{
  "name": "connection",
  "namespace": "draw2d.decoration",
  "description": "",
  "access": "",
  "virtual": false,
  "classes": [
    {
      "name": "ArrowDecorator",
      "namespace": "draw2d.decoration.connection",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "paint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Draws a filled arrow decoration.</p>\n<pre class=\"prettyprint source\"><code>                      ---+ [length , width/2]\n               -------   |\n[0,0]  --------          |\n   +---                  |==========================\n       --------          |\n               -------   |\n                      ---+ [length ,-width/2]\n\n</code></pre>",
          "parameters": [
            {
              "name": "paper",
              "type": "RaphaelPaper",
              "description": "<p>the raphael paper object for the paint operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "RaphaelPath",
            "description": ""
          }
        }
      ],
      "fires": "",
      "constructor": {
        "name": "ArrowDecorator",
        "description": "",
        "parameters": [
          {
            "name": "width",
            "type": "Number",
            "description": "<p>the width of the arrow</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "height",
            "type": "Number",
            "description": "<p>the height of the arrow</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          }
        ],
        "examples": [
          "// create and add two nodes which contains Ports (In and OUT)\n   //\n   var start = new draw2d.shape.node.Start();\n   var end   = new draw2d.shape.node.End();\n   // ...add it to the canvas\n   canvas.add( start, 50,50);\n   canvas.add( end, 230,80);\n\n   // Create a Connection and connect the Start and End node\n   //\n   var c = new draw2d.Connection();\n\n   // toggle from ManhattenRouter to DirectRouter to show the rotation of decorations\n   c.setRouter(new draw2d.layout.connection.DirectRouter());\n\n   // Set the endpoint decorations for the connection\n   //\n   c.setSourceDecorator(new draw2d.decoration.connection.ArrowDecorator());\n   c.setTargetDecorator(new draw2d.decoration.connection.ArrowDecorator());\n\n   // Connect the endpoints with the start and end port\n   //\n   c.setSource(start.getOutputPort(0));\n   c.setTarget(end.getInputPort(0));\n\n   // and finally add the connection to the canvas\n   canvas.add(c);"
        ]
      }
    },
    {
      "name": "BarDecorator",
      "namespace": "draw2d.decoration.connection",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "paint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Draw a bar decoration.</p>\n<pre class=\"prettyprint source\"><code>\n              | [length , width/2]\n              |\n[0,0]         |                          (Connection)\n   +==========|==========================\n              |\n              |\n              | [length ,-width/2]\n\n</code></pre>",
          "parameters": [
            {
              "name": "paper",
              "type": "RaphaelPaper",
              "description": "<p>the raphael paper object for the paint operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "RaphaelPath",
            "description": ""
          }
        }
      ],
      "fires": "",
      "constructor": {
        "name": "BarDecorator",
        "description": "",
        "parameters": [
          {
            "name": "width",
            "type": "Number",
            "description": "<p>the width of the bar</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "height",
            "type": "Number",
            "description": "<p>the height of the bar</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          }
        ],
        "examples": [
          "// create and add two nodes which contains Ports (In and OUT)\n   //\n   var start = new draw2d.shape.node.Start();\n   var end   = new draw2d.shape.node.End();\n   // ...add it to the canvas\n   canvas.add( start, 50,50);\n   canvas.add( end, 230,80);\n\n   // Create a Connection and connect the Start and End node\n   //\n   var c = new draw2d.Connection();\n\n   // toggle from ManhattenRouter to DirectRouter to show the rotation of decorations\n   c.setRouter(new draw2d.layout.connection.DirectRouter());\n\n   // Set the endpoint decorations for the connection\n   //\n   c.setSourceDecorator(new draw2d.decoration.connection.BarDecorator());\n   c.setTargetDecorator(new draw2d.decoration.connection.BarDecorator());\n   // Connect the endpoints with the start and end port\n   //\n   c.setSource(start.getOutputPort(0));\n   c.setTarget(end.getInputPort(0));\n\n   // and finally add the connection to the canvas\n   canvas.add(c);"
        ]
      }
    },
    {
      "name": "CircleDecorator",
      "namespace": "draw2d.decoration.connection",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "paint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Draw a filled circle decoration.</p>",
          "parameters": [
            {
              "name": "paper",
              "type": "RaphaelPaper",
              "description": "<p>the raphael paper object for the paint operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "RaphaelPath",
            "description": ""
          }
        }
      ],
      "fires": "",
      "constructor": {
        "name": "CircleDecorator",
        "description": "",
        "parameters": [
          {
            "name": "width",
            "type": "Number",
            "description": "<p>the width of the arrow</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "height",
            "type": "Number",
            "description": "<p>the height of the arrow</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          }
        ],
        "examples": [
          "// create and add two nodes which contains Ports (In and OUT)\n   //\n   var start = new draw2d.shape.node.Start();\n   var end   = new draw2d.shape.node.End();\n   // ...add it to the canvas\n   canvas.add( start, 50,50);\n   canvas.add( end, 230,80);\n\n   // Create a Connection and connect the Start and End node\n   //\n   var c = new draw2d.Connection();\n\n   // toggle from ManhattenRouter to DirectRouter to show the rotation of decorations\n   c.setRouter(new draw2d.layout.connection.DirectRouter());\n\n   // Set the endpoint decorations for the connection\n   //\n   c.setSourceDecorator(new draw2d.decoration.connection.CircleDecorator());\n   c.setTargetDecorator(new draw2d.decoration.connection.CircleDecorator());\n   // Connect the endpoints with the start and end port\n   //\n   c.setSource(start.getOutputPort(0));\n   c.setTarget(end.getInputPort(0));\n\n   // and finally add the connection to the canvas\n   canvas.add(c);"
        ]
      }
    },
    {
      "name": "Decorator",
      "namespace": "draw2d.decoration.connection",
      "description": "<p>Base class for any kind of Connection end/start decorations like arrows, bullets, circles, bars,...</p>",
      "extends": [],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "paint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Paint the decoration for a connector. The Connector starts always in\n[0,0] and ends in [x,0].\nIt is not necessary to consider any rotation of the connection. This will be done by the\nframework.</p>\n<pre>\n              | -Y\n              |\n              |\n --------------+-----------------------------&gt; +X\n              |\n              |\n              |\n              V +Y\n\n\n</pre>\n<p>See in ArrowConnectionDecorator for example implementation.</p>",
          "parameters": [
            {
              "name": "paper",
              "type": "RaphaelPaper",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Connection",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": []
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the stroke color for the decoration</p>",
          "parameters": [
            {
              "name": "c",
              "type": [
                "draw2d.util.Color",
                "String"
              ],
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Get the line color of the decoration</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "drawd.util.Color",
            "description": "<p>the current line color of null if the Decoration should use the color of the host connection</p>"
          }
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Set the background color for the decoration</p>",
          "parameters": [
            {
              "name": "c",
              "type": [
                "draw2d.util.Color",
                "String"
              ],
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Returns the fill color</p>",
          "parameters": [],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Change the dimension of the decoration shape</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>The new width of the decoration</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "height",
              "type": "Number",
              "description": "<p>The new height of the decoration</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "this",
            "description": ""
          }
        }
      ],
      "fires": "",
      "constructor": {
        "name": "Decorator",
        "description": "",
        "parameters": [],
        "examples": []
      }
    },
    {
      "name": "DiamondDecorator",
      "namespace": "draw2d.decoration.connection",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "functions": [
        {
          "name": "paint",
          "access": "private",
          "virtual": false,
          "deprecated": "",
          "description": "<p>Draw a filled diamond decoration.</p>\n<p>It's not your work to rotate the arrow. The draw2d do this job for you.</p>",
          "parameters": [
            {
              "name": "paper",
              "type": "RaphaelPaper",
              "description": "<p>the raphael paper object for the paint operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "inherited": false,
          "since": "",
          "examples": [],
          "returns": {
            "type": "RaphaelPath",
            "description": ""
          }
        }
      ],
      "fires": "",
      "constructor": {
        "name": "DiamondDecorator",
        "description": "",
        "parameters": [
          {
            "name": "width",
            "type": "Number",
            "description": "<p>the width of the arrow</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "height",
            "type": "Number",
            "description": "<p>the height of the arrow</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          }
        ],
        "examples": [
          "// create and add two nodes which contains Ports (In and OUT)\n   //\n   var start = new draw2d.shape.node.Start();\n   var end   = new draw2d.shape.node.End();\n   // ...add it to the canvas\n   canvas.add( start, 50,50);\n   canvas.add( end, 230,80);\n\n   // Create a Connection and connect the Start and End node\n   //\n   var c = new draw2d.Connection();\n\n   // toggle from ManhattenRouter to DirectRouter to show the rotation of decorations\n   c.setRouter(new draw2d.layout.connection.DirectRouter());\n\n   // Set the endpoint decorations for the connection\n   //\n   c.setSourceDecorator(new draw2d.decoration.connection.DiamondDecorator());\n   c.setTargetDecorator(new draw2d.decoration.connection.DiamondDecorator());\n   // Connect the endpoints with the start and end port\n   //\n   c.setSource(start.getOutputPort(0));\n   c.setTarget(end.getInputPort(0));\n\n   // and finally add the connection to the canvas\n   canvas.add(c);"
        ]
      }
    }
  ],
  "namespaces": []
}